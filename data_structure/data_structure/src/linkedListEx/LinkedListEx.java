package linkedListEx;

public class LinkedListEx {
	
	// LinkedList
	// Memory - 컴퓨터에서 기억을 담당 (메모리)
	
	// 컴퓨터에서 제일 중요한 제품 
	// CPU - 생각, 계산 연산을 담당 / MEMORY (RAM) - 기억을 담당 / STORAGE (HDD/SSD) - 저장 장치 (파일을 저장)
	// Storage 는 가격이 저렴 용량이 크고 전원이 꺼져도 데이터가 저장이 됨
	// Memory 는 가격이 굉장히 비싸고 용량이 작고 컴퓨터를 끄면 데이터가 사라짐
	// Memory 와 Storage 가장 큰 차이점은 Storage 보다 훨씬 빠름
	// CPU 는 속도가 굉장히 빠름 그러므로 Storage 에서 데이터를 가져오려하면 답이 굉장히 늦음
	// CPU 가 어떤 계산을 처리하기 위하여서는 Memory 에서 데이터를 가져옴
	
	// 처리 방식은 Storage 에서 Memory 로 데이터를 보내서 CPU 가 처리
	
	// LinkedList 는 ArrayList 와 함께 List 를 만드는 방법중에 하나
	// LinkedList 를 이해하는 Key는 Linked 임
	// Linked 는 연결을 의미
	
	// 데이터 스트럭쳐의 대상은 Memory 임 Memory 를 효율적으로 사용하는 것이 Data-Structure 의 역할임
	// Memory 에 각각 Address 가 있으며 Adress 가 가리키는 곳에 데이터가 저장
	// 각각의 주소에 접근하는 걸리는 시간이 동일하다. (이러한 메모리를 Random Access Memory 라고 함)
	
	// 찾고자 하는 데이터가 어디에 위치에 있는가 Adress 를 알면 데이터를 굉장히 빠르게 가져올 수 있음
	// 이러한 것을 잘 활용하면 Application 은 속도가 굉장히 빨라짐
	
	// ArrayList 는 데이터가 연속적으로 다닥다닥 붙어있음
	// LinkedList 는 데이터가 각각 흩어져 있으며 서로 연결되어 있음
	
	// LinkedList 는 element 보다 node/vertex 라는 용어를 주로 사용
	
	// 한 Node 에는 Data Field / Link Field 가 있음 Data Field 는 실제 데이터가 담겨져있음
	// Linked Field 에 다음 노드가 무엇인지 저장되어 있음
	// 1. 노드를 생성
	// 2. 새로 생성한 Next 값에 Head 를 지정
	// 3. 해당 LinkedList 에 시작이 되는 지점음 Head 로 지정
	
	// LinkedList 는 데이터를 추가/삭제가 굉장히 빠름
	
	// LinkedList 는 LinkedList 의 장점이 있고 ArrayList 는 ArrayList 의 장점이 있음
	// 각 컬렉션을 사용 시 왜 사용하는 지 언제 쓰는지 알고 필요시에 사용이 중요
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
